schema {
    query: Query,
    mutation: Mutation
}

type Mutation {
    createBook(newBook: BookInput): Book! @aws_auth(cognito_groups: ["Admin"])
    createOrder(newOrder: OrderInput): Boolean! @aws_auth(cognito_groups: ["Customer"])
}

type Query {
    getBookById(id: ID!): Book!
    listBooks(limit:Int!, page: Int!): BooksPage!
    getOrderById(id: ID!): OrderItem!
    myOrders(limit:Int!, page: Int!): OrdersPage!
}

input OrderInput {
    items: [OrderItemInput]
}

input OrderItemInput {
    bookId: ID!
    quantity: Int!
}

input BookInput {
    title: String!
    description: String
    imageUrl: AWSURL!
    author: String!
    price: Float!
    volume: Int!
    status: BookStatus 
}

enum BookStatus {
    Available
    NotAvailable
}

type OrdersPage {
    orders: [OrderItem]
    page: Int
}

type OrderItem implements CreateUpdateI {
    userId: ID!
    orderId: ID!
    book: Book!
    quantity: Int!    
    createedAt: String!
    updatedAt: String!
}

type BooksPage {
    books: [Book]
    page: Int
}

type Book implements CreateUpdateI {
    bookId: ID!
    title: String!
    description: String
    imageUrl: AWSURL
    author: String!
    price: Float!
    volume: Int!
    createedAt: String!
    updatedAt: String!
}

interface CreateUpdateI {
    createedAt: String!
    updatedAt: String!
}